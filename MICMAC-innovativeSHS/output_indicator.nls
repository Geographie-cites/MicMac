
to find-local-maxima-I

  if gMaxI <= compute-pop-total-with-state "I"
  [
    set gMaxI compute-pop-total-with-state "I"
    set gTimeofMaxI (ticks - min [tagged?] of nodes)
  ]

end

to compute-end-indicator 
    
  set gduration (ticks - min [tagged?] of nodes)
  set gduration-days gduration / ( gnbStepCalib / 60)
  
  set gpop-expected compute-pop-total * gmobility-rate * gduration-days
  
  let pop (sum [S_Node + I_Node + R_Node] of Nodes) + (sum [S_Group + I_Group + R_Group] of MobileGroups)
  
  let pmt gcumulated-pop-flight-expected
  let pmr gcumulated-pop-flight-real 
  set gout-cumulated-traffic-reduction ((pmt - pmr) / pmt) * 100
  set gTimeToReachAllNodes (max [tagged?] of nodes - min [tagged?] of nodes)
  set gtotal-number-people-infected ((compute-pop-total-with-state "R" + compute-pop-total-with-state "I") / pop) * 100   

  ;; (population cumule ayant vole / population totale initiale) / (duree theorique de l'epidemie * (duree reelle epidemie / nb pas necessaire au calibrage) )
  set gend-effective-mobility-rate (gcumulated-pop-flight-real / ( gnumber-nodes * (gS-At-Node + gI-At-Node + gR-At-Node ))) / ( gDurationEpidemy-days  * ( gduration / gnbStepCalib) )



end




;________________________
;Map Outputs
;
;
;------------------------

to map-output
  
  if gOutput-Mapping = "Standard View" [ask edges [set thickness 0 set color white] show-infected-nodes] 
  if gOutput-Mapping = "Infected Travellers" [map-infected-on-edges show-infected-nodes]
  if gOutput-Mapping = "Trafic" [map-trafic-on-edges show-infected-nodes ]
  if gOutput-Mapping = "Airports Closed by Quarantine" [ask nodes [ifelse (in-airport + out-airport != 2) [set color yellow] [if color = yellow [set color red]]]]
  end


to show-infected-nodes
ask nodes with [I_node > 0] [set color red]
end

to map-trafic-on-edges
  let reducfactor 0.1
 ask edges
 [
   set color white
  set thickness (ln (edge_trafic + 1)) * reducfactor
 ]
end


to map-infected-on-edges
  let reducfactor 0.1
  ask edges with [edge_infected = 0]  [set thickness 0]
 ask edges with [edge_infected > 1] 
 [
   set color red
  set thickness (ln (edge_infected + 1)) * reducfactor 
 ]
end
